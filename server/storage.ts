// server/storage.ts - VERS√ÉO COMPLETA CORRIGIDA
import { 
  type User, type InsertUser, type Product, type InsertProduct, 
  type Category, type Location, type InsertCategory, type InsertLocation, 
  type Movement, type InsertMovement, type Inventory, type InsertInventory, 
  type InventoryCount, type InsertInventoryCount, type Report, type InsertReport,
  type ImportHistory, type InsertImportHistory, type NfeProduct, type InsertNfeProduct,
  type NfeData, type InsertNfeData,
  type Empresa, type InsertEmpresa, type EmailVerificacao, type InsertEmailVerificacao,
  type CadastroUsuario, type CadastroEmpresa
} from "@shared/schema";
import { randomUUID } from "crypto";
import { db } from "./db";
import { 
  users, products, categories, locations, movements, inventories, 
  inventoryCounts, reports, importHistory, nfeProducts, nfeData,
  empresas, emailVerificacoes
} from "@shared/schema";
import { eq, and, desc, sql } from "drizzle-orm";

export interface IStorage {
  // M√©todos existentes
  getUser(id: string): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  getUsers(): Promise<User[]>; // üî• M√âTODO ADICIONADO
  getProducts(): Promise<Product[]>;
  getProduct(id: string): Promise<Product | undefined>;
  createProduct(product: InsertProduct): Promise<Product>;
  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;
  deleteProduct(id: string): Promise<void>;
  getProductsByCategory(categoryId: string): Promise<Product[]>;
  getCategories(): Promise<Category[]>;
  getCategory(id: string): Promise<Category | undefined>;
  createCategory(category: InsertCategory): Promise<Category>;
  getLocations(): Promise<Location[]>;
  getLocation(id: string): Promise<Location | undefined>;
  createLocation(location: InsertLocation): Promise<Location>;
  getMovements(): Promise<Movement[]>;
  createMovement(movement: InsertMovement): Promise<Movement>;
  getMovementsByProduct(productId: string): Promise<Movement[]>;
  getInventories(): Promise<Inventory[]>;
  getInventory(id: string): Promise<Inventory | undefined>;
  createInventory(inventory: InsertInventory): Promise<Inventory>;
  updateInventory(id: string, inventory: Partial<InsertInventory>): Promise<Inventory>;
  finalizeInventory(id: string): Promise<Inventory>;
  reopenInventory(id: string): Promise<Inventory>;
  getInventoryCounts(inventoryId: string): Promise<InventoryCount[]>;
  createInventoryCount(count: InsertInventoryCount): Promise<InventoryCount>;

  // M√©todos para relat√≥rios
  createReport(report: InsertReport): Promise<Report>;
  getReports(): Promise<Report[]>;
  getReport(id: string): Promise<Report | undefined>;
  deleteReport(id: string): Promise<void>;
  
  // M√©todos para dados dos relat√≥rios
  getProductsReport(): Promise<any>;
  getLowStockProducts(): Promise<any>;
  getFinancialReport(): Promise<any>;
  getMovementsReport(startDate?: Date, endDate?: Date): Promise<any>;
  getInventoryReport(): Promise<any>;
  getProductsByLocationReport(): Promise<any>;

  // M√©todos para importa√ß√£o
  createImportHistory(importData: InsertImportHistory): Promise<ImportHistory>;
  getImportHistory(): Promise<ImportHistory[]>;
  getImportHistoryById(id: string): Promise<ImportHistory | undefined>;
  updateImportHistory(id: string, importData: Partial<InsertImportHistory>): Promise<ImportHistory>;
  deleteImportHistory(id: string): Promise<void>;
  
  createNfeProduct(nfeProduct: InsertNfeProduct): Promise<NfeProduct>;
  getNfeProductsByImport(importHistoryId: string): Promise<NfeProduct[]>;
  
  createNfeData(nfeData: InsertNfeData): Promise<NfeData>;
  getNfeDataByImport(importHistoryId: string): Promise<NfeData | undefined>;
  getNfeDataByAccessKey(accessKey: string): Promise<NfeData | undefined>;
  
  // M√©todo para processar importa√ß√£o completa
  processNfeImport(fileData: any, userId?: string): Promise<ImportHistory>;

  // üî• M√âTODOS PARA CADASTRO
  createEmpresa(empresa: InsertEmpresa): Promise<Empresa>;
  getEmpresa(id: string): Promise<Empresa | undefined>;
  getEmpresaByCnpj(cnpj: string): Promise<Empresa | undefined>;
  getEmpresaByEmail(email: string): Promise<Empresa | undefined>;
  updateEmpresa(id: string, empresa: Partial<InsertEmpresa>): Promise<Empresa>;
  
  createEmailVerificacao(verificacao: InsertEmailVerificacao): Promise<EmailVerificacao>;
  getEmailVerificacao(token: string): Promise<EmailVerificacao | undefined>;
  marcarEmailComoVerificado(userId: string): Promise<User>;
  utilizarTokenVerificacao(token: string): Promise<EmailVerificacao>;
  
  // M√©todos espec√≠ficos para cadastro
  cadastrarUsuarioIndividual(dados: CadastroUsuario): Promise<{user: User, token: string}>;
  cadastrarEmpresa(dados: CadastroEmpresa): Promise<{empresa: Empresa, admin: User, token: string}>;

  // üî• NOVOS M√âTODOS PARA PERMISS√ïES
  getUsersByEmpresa(empresaId: string): Promise<User[]>;
  createUserForEmpresa(userData: any, empresaId: string, createdBy: string): Promise<User>;
  updateUserRole(userId: string, role: 'super_admin' | 'admin' | 'user'): Promise<User>;
  deleteUser(userId: string): Promise<void>;
  canUserAccessModule(userId: string, module: string): Promise<boolean>;
  getUserPermissions(userId: string): Promise<any>;
  getEmpresaUsers(empresaId: string): Promise<User[]>;
}

export class DatabaseStorage implements IStorage {
  // üî• M√âTODO ensureDefaultUser ATUALIZADO
  async ensureDefaultUser(): Promise<string> {
    try {
      const existingUser = await this.getUserByEmail('admin@stockmaster.com');
      if (existingUser) {
        return existingUser.id;
      }
      
      const defaultUser: InsertUser = {
        username: 'admin',
        password: 'admin123',
        name: 'Administrador',
        email: 'admin@stockmaster.com',
        tipo: 'individual',
        role: 'super_admin', // üî• AGORA √â SUPER ADMIN
        emailVerificado: true
      };
      const user = await this.createUser(defaultUser);
      return user.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio padr√£o:', error);
      throw new Error('Erro ao criar usu√°rio padr√£o');
    }
  }

  // üî• M√âTODO getUsers ADICIONADO
  async getUsers(): Promise<User[]> {
    try {
      console.log('üìã Buscando todos os usu√°rios...');
      const result = await db.select().from(users).orderBy(users.name);
      console.log(`‚úÖ ${result.length} usu√°rios encontrados`);
      return result;
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error);
      return [];
    }
  }

  // üî• M√âTODOS EXISTENTES (MANTIDOS)
  async getUser(id: string): Promise<User | undefined> {
    try {
      const result = await db.select().from(users).where(eq(users.id, id));
      return result[0];
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio por ID:', error);
      return undefined;
    }
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    try {
      const result = await db.select().from(users).where(eq(users.username, username));
      return result[0];
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio por username:', error);
      return undefined;
    }
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    try {
      console.log(`üîç Buscando usu√°rio por email: ${email}`);
      const result = await db.select().from(users).where(eq(users.email, email));
      console.log(`üìä Resultado da busca:`, result.length > 0 ? 'Usu√°rio encontrado' : 'Usu√°rio n√£o encontrado');
      return result[0];
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio por email:', error);
      try {
        console.log('üîÑ Tentando fallback: buscar por username...');
        const result = await db.select().from(users).where(eq(users.username, email));
        return result[0];
      } catch (fallbackError) {
        console.error('‚ùå Fallback tamb√©m falhou:', fallbackError);
        return undefined;
      }
    }
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    try {
      const id = randomUUID();
      const user: User = { 
        ...insertUser, 
        id,
        emailVerificado: insertUser.emailVerificado || false,
        tokenVerificacao: null,
        dataVerificacao: null,
        createdAt: new Date()
      };
      
      console.log(`üë§ Criando usu√°rio:`, { 
        id: user.id, 
        username: user.username, 
        email: user.email,
        role: user.role,
        emailVerificado: user.emailVerificado 
      });
      
      await db.insert(users).values(user);
      
      const createdUser = await this.getUser(id);
      if (!createdUser) {
        throw new Error("Usu√°rio n√£o encontrado ap√≥s cria√ß√£o");
      }
      
      console.log('‚úÖ Usu√°rio criado com sucesso');
      return createdUser;
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error);
      throw new Error("Erro ao criar usu√°rio: " + (error instanceof Error ? error.message : 'Erro desconhecido'));
    }
  }

  async getProducts(): Promise<Product[]> {
    return await db.select().from(products).orderBy(products.name);
  }

  async getProduct(id: string): Promise<Product | undefined> {
    const result = await db.select().from(products).where(eq(products.id, id));
    return result[0];
  }

  async createProduct(insertProduct: InsertProduct): Promise<Product> {
    try {
      const id = randomUUID();
      const productData = {
        ...insertProduct,
        id,
        unitPrice: insertProduct.unitPrice?.toString() || '0'
      };
      await db.insert(products).values(productData);
      const result = await db.select().from(products).where(eq(products.id, id));
      if (!result[0]) throw new Error("Produto n√£o encontrado ap√≥s cria√ß√£o");
      return result[0];
    } catch (error) {
      throw new Error("Erro ao criar produto");
    }
  }

  async updateProduct(id: string, productData: Partial<InsertProduct>): Promise<Product> {
    const updateData = { ...productData };
    if (updateData.unitPrice !== undefined) {
      updateData.unitPrice = updateData.unitPrice.toString();
    }
    await db.update(products).set(updateData).where(eq(products.id, id));
    const updated = await this.getProduct(id);
    if (!updated) throw new Error("Product not found");
    return updated;
  }

  async deleteProduct(id: string): Promise<void> {
    await db.delete(products).where(eq(products.id, id));
  }

  async getProductsByCategory(categoryId: string): Promise<Product[]> {
    return await db.select().from(products).where(eq(products.categoryId, categoryId)).orderBy(products.name);
  }

  async getCategories(): Promise<Category[]> {
    return await db.select().from(categories).orderBy(categories.name);
  }

  async getCategory(id: string): Promise<Category | undefined> {
    const result = await db.select().from(categories).where(eq(categories.id, id));
    return result[0];
  }

  async createCategory(insertCategory: InsertCategory): Promise<Category> {
    const id = randomUUID();
    const category: Category = { ...insertCategory, id };
    await db.insert(categories).values(category);
    return category;
  }

  async getLocations(): Promise<Location[]> {
    return await db.select().from(locations).orderBy(locations.name);
  }

  async getLocation(id: string): Promise<Location | undefined> {
    const result = await db.select().from(locations).where(eq(locations.id, id));
    return result[0];
  }

  async createLocation(insertLocation: InsertLocation): Promise<Location> {
    const id = randomUUID();
    const location: Location = { ...insertLocation, id };
    await db.insert(locations).values(location);
    return location;
  }

  async getMovements(): Promise<Movement[]> {
    return await db.select().from(movements).orderBy(desc(movements.createdAt));
  }

  async createMovement(insertMovement: InsertMovement): Promise<Movement> {
    const id = randomUUID();
    const movement: Movement = { ...insertMovement, id, createdAt: new Date() };
    await db.insert(movements).values(movement);
    return movement;
  }

  async getMovementsByProduct(productId: string): Promise<Movement[]> {
    return await db.select().from(movements).where(eq(movements.productId, productId)).orderBy(desc(movements.createdAt));
  }

  async getInventories(): Promise<Inventory[]> {
    return await db.select().from(inventories).orderBy(desc(inventories.createdAt));
  }

  async getInventory(id: string): Promise<Inventory | undefined> {
    const result = await db.select().from(inventories).where(eq(inventories.id, id));
    return result[0];
  }

  async createInventory(insertInventory: InsertInventory): Promise<Inventory> {
    try {
      const id = randomUUID();
      let userId = insertInventory.userId;
      if (!userId) userId = await this.ensureDefaultUser();
      const inventoryData = { ...insertInventory, id, userId, createdAt: new Date(), status: 'em_andamento' as const };
      await db.insert(inventories).values(inventoryData);
      const result = await db.select().from(inventories).where(eq(inventories.id, id));
      if (!result[0]) throw new Error("Invent√°rio n√£o encontrado ap√≥s cria√ß√£o");
      return result[0];
    } catch (error) {
      throw new Error("Erro ao criar invent√°rio");
    }
  }

  async updateInventory(id: string, inventoryData: Partial<InsertInventory>): Promise<Inventory> {
    await db.update(inventories).set(inventoryData).where(eq(inventories.id, id));
    const updated = await db.select().from(inventories).where(eq(inventories.id, id));
    if (!updated[0]) throw new Error("Inventory not found");
    return updated[0];
  }

  async finalizeInventory(id: string): Promise<Inventory> {
    try {
      await db.update(inventories).set({ status: 'finalizado', finishedAt: new Date() }).where(eq(inventories.id, id));
      const updated = await db.select().from(inventories).where(eq(inventories.id, id));
      if (!updated[0]) throw new Error("Invent√°rio n√£o encontrado");
      return updated[0];
    } catch (error) {
      throw new Error("Erro ao finalizar invent√°rio");
    }
  }

  async reopenInventory(id: string): Promise<Inventory> {
    try {
      await db.update(inventories)
        .set({ 
          status: 'em_andamento', 
          finishedAt: null 
        })
        .where(eq(inventories.id, id));
      
      const updated = await db.select().from(inventories).where(eq(inventories.id, id));
      if (!updated[0]) throw new Error("Invent√°rio n√£o encontrado");
      return updated[0];
    } catch (error) {
      throw new Error("Erro ao reabrir invent√°rio");
    }
  }

  async getInventoryCounts(inventoryId: string): Promise<InventoryCount[]> {
    return await db.select().from(inventoryCounts).where(eq(inventoryCounts.inventoryId, inventoryId)).orderBy(inventoryCounts.createdAt);
  }

  async createInventoryCount(insertCount: InsertInventoryCount): Promise<InventoryCount> {
    try {
      const existingCount = await db.select().from(inventoryCounts).where(and(eq(inventoryCounts.inventoryId, insertCount.inventoryId), eq(inventoryCounts.productId, insertCount.productId)));
      if (existingCount.length > 0) {
        const id = existingCount[0].id;
        await db.update(inventoryCounts).set({ countedQuantity: insertCount.countedQuantity, difference: insertCount.difference, notes: insertCount.notes }).where(eq(inventoryCounts.id, id));
        const updated = await db.select().from(inventoryCounts).where(eq(inventoryCounts.id, id));
        return updated[0];
      } else {
        const id = randomUUID();
        const count: InventoryCount = { ...insertCount, id, createdAt: new Date() };
        await db.insert(inventoryCounts).values(count);
        const result = await db.select().from(inventoryCounts).where(eq(inventoryCounts.id, id));
        return result[0];
      }
    } catch (error) {
      throw new Error("Erro ao criar contagem de invent√°rio");
    }
  }

  // M√âTODOS PARA RELAT√ìRIOS
  async createReport(insertReport: InsertReport): Promise<Report> {
    const id = randomUUID();
    const report: Report = { 
      ...insertReport, 
      id, 
      createdAt: new Date(),
      fileSize: 0
    };
    await db.insert(reports).values(report);
    return report;
  }

  async getReports(): Promise<Report[]> {
    return await db.select().from(reports).orderBy(desc(reports.createdAt));
  }

  async getReport(id: string): Promise<Report | undefined> {
    const result = await db.select().from(reports).where(eq(reports.id, id));
    return result[0];
  }

  async deleteReport(id: string): Promise<void> {
    await db.delete(reports).where(eq(reports.id, id));
  }

  // RELAT√ìRIO DE PRODUTOS COMPLETO
  async getProductsReport(): Promise<any> {
    try {
      const products = await this.getProducts();
      const categories = await this.getCategories();
      const locations = await this.getLocations();

      const enrichedProducts = products.map(product => {
        const category = categories.find(c => c.id === product.categoryId);
        const location = locations.find(l => l.id === product.locationId);
        const unitPrice = parseFloat(product.unitPrice?.toString() || '0');
        const totalValue = unitPrice * product.quantity;
        
        return {
          id: product.id,
          codigo: product.code || 'N/A',
          nome: product.name,
          tipo: product.type,
          categoria: category?.name || 'Sem Categoria',
          localizacao: location?.name || 'Sem Local',
          quantidade: product.quantity,
          estoque_minimo: product.minQuantity,
          preco_unitario: unitPrice,
          valor_total: totalValue,
          descricao: product.description || '',
          status: product.quantity === 0 ? 'SEM ESTOQUE' : 
                  product.quantity <= product.minQuantity ? 'ESTOQUE BAIXO' : 'NORMAL'
        };
      });

      const totalValue = enrichedProducts.reduce((sum, p) => sum + p.valor_total, 0);
      const lowStockCount = products.filter(p => p.quantity <= p.minQuantity).length;
      const outOfStockCount = products.filter(p => p.quantity === 0).length;

      const result = {
        titulo: 'Relat√≥rio de Produtos',
        produtos: enrichedProducts,
        resumo: {
          total_produtos: products.length,
          valor_total_estoque: totalValue,
          produtos_estoque_baixo: lowStockCount,
          produtos_sem_estoque: outOfStockCount,
          produtos_normais: products.length - lowStockCount - outOfStockCount
        },
        gerado_em: new Date().toISOString()
      };

      return result;

    } catch (error) {
      throw new Error('Erro ao gerar relat√≥rio de produtos');
    }
  }

  // RELAT√ìRIO DE ESTOQUE BAIXO COMPLETO
  async getLowStockProducts(): Promise<any> {
    try {
      const products = await this.getProducts();
      const categories = await this.getCategories();
      const lowStockProducts = products.filter(p => p.quantity <= p.minQuantity);

      const enrichedProducts = lowStockProducts.map(product => {
        const category = categories.find(c => c.id === product.categoryId);
        const unitPrice = parseFloat(product.unitPrice?.toString() || '0');
        const difference = product.minQuantity - product.quantity;
        const valueAtRisk = unitPrice * difference;
        
        return {
          id: product.id,
          codigo: product.code || 'N/A',
          nome: product.name,
          tipo: product.type,
          categoria: category?.name || 'Sem Categoria',
          quantidade_atual: product.quantity,
          estoque_minimo: product.minQuantity,
          diferenca: difference,
          preco_unitario: unitPrice,
          valor_em_risco: valueAtRisk,
          urgencia: product.quantity === 0 ? 'CR√çTICO' : 'ALERTA',
          acao_recomendada: product.quantity === 0 ? 'REPOR URGENTEMENTE' : 'MONITORAR E REPOR'
        };
      });

      const criticalProducts = lowStockProducts.filter(p => p.quantity === 0).length;
      const warningProducts = lowStockProducts.filter(p => p.quantity > 0 && p.quantity <= p.minQuantity).length;
      const totalValueAtRisk = enrichedProducts.reduce((sum, p) => sum + p.valor_em_risco, 0);

      const result = {
        titulo: 'Relat√≥rio de Estoque Baixo',
        produtos: enrichedProducts,
        resumo: {
          total_estoque_baixo: lowStockProducts.length,
          produtos_criticos: criticalProducts,
          produtos_alerta: warningProducts,
          valor_total_em_risco: totalValueAtRisk
        },
        gerado_em: new Date().toISOString()
      };

      return result;

    } catch (error) {
      throw new Error('Erro ao gerar relat√≥rio de estoque baixo');
    }
  }

  // RELAT√ìRIO FINANCEIRO COMPLETO
  async getFinancialReport(): Promise<any> {
    try {
      const products = await this.getProducts();
      const categories = await this.getCategories();
      
      const totalValue = products.reduce((sum, product) => {
        const price = parseFloat(product.unitPrice?.toString() || '0');
        return sum + (price * product.quantity);
      }, 0);

      const valorPorCategoria = categories.map(category => {
        const categoryProducts = products.filter(p => p.categoryId === category.id);
        const valorCategoria = categoryProducts.reduce((sum, product) => {
          const price = parseFloat(product.unitPrice?.toString() || '0');
          return sum + (price * product.quantity);
        }, 0);
        
        return {
          categoria: category.name,
          quantidade_produtos: categoryProducts.length,
          valor_total: valorCategoria,
          percentual: totalValue > 0 ? (valorCategoria / totalValue) * 100 : 0
        };
      }).filter(item => item.quantidade_produtos > 0);

      const topProdutos = products
        .map(product => {
          const category = categories.find(c => c.id === product.categoryId);
          const unitPrice = parseFloat(product.unitPrice?.toString() || '0');
          const totalValue = unitPrice * product.quantity;
          
          return {
            nome: product.name,
            codigo: product.code || 'N/A',
            categoria: category?.name || 'Sem Categoria',
            quantidade: product.quantity,
            preco_unitario: unitPrice,
            valor_total: totalValue
          };
        })
        .sort((a, b) => b.valor_total - a.valor_total)
        .slice(0, 10);

      const result = {
        titulo: 'Relat√≥rio Financeiro do Estoque',
        resumo: {
          valor_total_estoque: totalValue,
          total_produtos: products.length,
          valor_medio_produto: products.length > 0 ? totalValue / products.length : 0,
          investimento_total: totalValue
        },
        valor_por_categoria: valorPorCategoria,
        top_produtos: topProdutos,
        gerado_em: new Date().toISOString()
      };

      return result;

    } catch (error) {
      throw new Error('Erro ao gerar relat√≥rio financeiro');
    }
  }

  // RELAT√ìRIO DE MOVIMENTA√á√ïES COMPLETO
  async getMovementsReport(startDate?: Date, endDate?: Date): Promise<any> {
    try {
      let movements = await this.getMovements();
      const products = await this.getProducts();

      if (startDate || endDate) {
        movements = movements.filter(movement => {
          const movementDate = new Date(movement.createdAt);
          const matchesStart = !startDate || movementDate >= startDate;
          const matchesEnd = !endDate || movementDate <= endDate;
          return matchesStart && matchesEnd;
        });
      }

      const enrichedMovements = movements.map(movement => {
        const product = products.find(p => p.id === movement.productId);
        return {
          id: movement.id,
          produto: product?.name || 'Produto n√£o encontrado',
          codigo_produto: product?.code || 'N/A',
          tipo: movement.type === 'entrada' ? 'ENTRADA' : movement.type === 'saida' ? 'SA√çDA' : 'AJUSTE',
          quantidade: movement.quantity,
          data: new Date(movement.createdAt).toLocaleDateString('pt-BR'),
          hora: new Date(movement.createdAt).toLocaleTimeString('pt-BR'),
          observacoes: movement.notes || 'Sem observa√ß√µes'
        };
      });

      const entradaTotal = movements.filter(m => m.type === 'entrada').reduce((sum, m) => sum + m.quantity, 0);
      const saidaTotal = movements.filter(m => m.type === 'saida').reduce((sum, m) => sum + m.quantity, 0);

      const result = {
        titulo: 'Relat√≥rio de Movimenta√ß√µes',
        periodo: {
          inicio: startDate?.toISOString().split('T')[0] || 'Todo o per√≠odo',
          fim: endDate?.toISOString().split('T')[0] || 'Todo o per√≠odo'
        },
        movimentacoes: enrichedMovements,
        resumo: {
          total_movimentacoes: movements.length,
          entradas: movements.filter(m => m.type === 'entrada').length,
          saidas: movements.filter(m => m.type === 'saida').length,
          ajustes: movements.filter(m => m.type === 'ajuste').length,
          quantidade_total_entrada: entradaTotal,
          quantidade_total_saida: saidaTotal,
          saldo: entradaTotal - saidaTotal
        },
        gerado_em: new Date().toISOString()
      };

      return result;

    } catch (error) {
      throw new Error('Erro ao gerar relat√≥rio de movimenta√ß√µes');
    }
  }

  // RELAT√ìRIO DE INVENT√ÅRIOS COMPLETO
  async getInventoryReport(): Promise<any> {
    try {
      const inventories = await this.getInventories();
      const inventoryCounts = await Promise.all(
        inventories.map(inv => this.getInventoryCounts(inv.id))
      );

      const enrichedInventories = inventories.map((inventory, index) => {
        const counts = inventoryCounts[index];
        const produtosComDivergencia = counts.filter(c => c.difference !== 0).length;
        const precisao = counts.length > 0 ? ((counts.length - produtosComDivergencia) / counts.length) * 100 : 100;
        
        return {
          id: inventory.id,
          nome: inventory.name,
          status: inventory.status === 'finalizado' ? 'FINALIZADO' : 'EM ANDAMENTO',
          data_inicio: new Date(inventory.createdAt).toLocaleDateString('pt-BR'),
          data_fim: inventory.finishedAt ? new Date(inventory.finishedAt).toLocaleDateString('pt-BR') : 'Em andamento',
          total_produtos: counts.length,
          produtos_com_divergencia: produtosComDivergencia,
          precisao: precisao.toFixed(2) + '%',
          responsavel: inventory.userId
        };
      });

      const finishedInventories = inventories.filter(i => i.status === 'finalizado').length;
      const ongoingInventories = inventories.filter(i => i.status === 'em_andamento').length;
      const overallAccuracy = enrichedInventories.length > 0 ? 
        enrichedInventories.reduce((sum, inv) => sum + parseFloat(inv.precisao), 0) / enrichedInventories.length : 100;

      const result = {
        titulo: 'Relat√≥rio de Invent√°rios',
        inventarios: enrichedInventories,
        resumo: {
          total_inventarios: inventories.length,
          inventarios_finalizados: finishedInventories,
          inventarios_andamento: ongoingInventories,
          precisao_geral: overallAccuracy.toFixed(2) + '%'
        },
        gerado_em: new Date().toISOString()
      };

      return result;

    } catch (error) {
      throw new Error('Erro ao gerar relat√≥rio de invent√°rios');
    }
  }

  // RELAT√ìRIO DE PRODUTOS POR LOCAL COMPLETO
  async getProductsByLocationReport(): Promise<any> {
    try {
      const products = await this.getProducts();
      const locations = await this.getLocations();
      const categories = await this.getCategories();

      const produtosPorLocal = locations.map(location => {
        const locationProducts = products.filter(product => product.locationId === location.id);
        const totalValue = locationProducts.reduce((sum, product) => {
          const price = parseFloat(product.unitPrice?.toString() || '0');
          return sum + (price * product.quantity);
        }, 0);
        
        const produtosEnriquecidos = locationProducts.map(product => {
          const category = categories.find(c => c.id === product.categoryId);
          const unitPrice = parseFloat(product.unitPrice?.toString() || '0');
          const totalValue = unitPrice * product.quantity;
          
          return {
            codigo: product.code || 'N/A',
            nome: product.name,
            categoria: category?.name || 'Sem Categoria',
            quantidade: product.quantity,
            preco_unitario: unitPrice,
            valor_total: totalValue,
            status: product.quantity <= product.minQuantity ? 'ESTOQUE BAIXO' : 'NORMAL'
          };
        });

        return {
          local: location.name,
          descricao: location.description || 'Sem descri√ß√£o',
          produtos: produtosEnriquecidos,
          resumo: {
            total_produtos: locationProducts.length,
            quantidade_total: locationProducts.reduce((sum, p) => sum + p.quantity, 0),
            valor_total: totalValue,
            produtos_estoque_baixo: locationProducts.filter(p => p.quantity <= p.minQuantity).length
          }
        };
      });

      const valorTotalGeral = produtosPorLocal.reduce((sum, local) => sum + local.resumo.valor_total, 0);
      const totalProdutosGeral = produtosPorLocal.reduce((sum, local) => sum + local.resumo.total_produtos, 0);

      const result = {
        titulo: 'Relat√≥rio de Produtos por Local',
        produtos_por_local: produtosPorLocal,
        resumo_geral: {
          total_locais: locations.length,
          total_produtos: totalProdutosGeral,
          valor_total_estoque: valorTotalGeral,
          local_mais_valioso: produtosPorLocal.sort((a, b) => b.resumo.valor_total - a.resumo.valor_total)[0]?.local || 'N/A',
          local_mais_produtos: produtosPorLocal.sort((a, b) => b.resumo.total_produtos - a.resumo.total_produtos)[0]?.local || 'N/A'
        },
        gerado_em: new Date().toISOString()
      };

      return result;

    } catch (error) {
      throw new Error('Erro ao gerar relat√≥rio de produtos por local');
    }
  }

  // M√âTODOS PARA IMPORTACAO DE XML
  async createImportHistory(importData: InsertImportHistory): Promise<ImportHistory> {
    const id = randomUUID();
    const history: ImportHistory = { 
      ...importData, 
      id, 
      createdAt: new Date(),
      processedAt: importData.status === 'processado' ? new Date() : null,
      productsFound: importData.productsFound || 0,
      productsCreated: importData.productsCreated || 0,
      productsUpdated: importData.productsUpdated || 0,
      supplier: importData.supplier || 'Fornecedor n√£o identificado',
      supplierCnpj: importData.supplierCnpj || '',
      supplierAddress: importData.supplierAddress || '',
      nfeNumber: importData.nfeNumber || '',
      nfeKey: importData.nfeKey || '',
      emissionDate: importData.emissionDate || new Date(),
      totalValue: importData.totalValue?.toString() || '0'
    };
    await db.insert(importHistory).values(history);
    return history;
  }

  async getImportHistory(): Promise<ImportHistory[]> {
    return await db.select().from(importHistory).orderBy(desc(importHistory.createdAt));
  }

  async getImportHistoryById(id: string): Promise<ImportHistory | undefined> {
    const result = await db.select().from(importHistory).where(eq(importHistory.id, id));
    return result[0];
  }

  async updateImportHistory(id: string, importData: Partial<InsertImportHistory>): Promise<ImportHistory> {
    const updateData: any = { ...importData };
    
    if (importData.status === 'processado' && !updateData.processedAt) {
      updateData.processedAt = new Date();
    }
    
    await db.update(importHistory).set(updateData).where(eq(importHistory.id, id));
    const updated = await this.getImportHistoryById(id);
    if (!updated) throw new Error("Hist√≥rico de importa√ß√£o n√£o encontrado");
    return updated;
  }

  async deleteImportHistory(id: string): Promise<void> {
    try {
      await db.delete(nfeProducts).where(eq(nfeProducts.importHistoryId, id));
      await db.delete(nfeData).where(eq(nfeData.importHistoryId, id));
      await db.delete(importHistory).where(eq(importHistory.id, id));
      console.log(`‚úÖ Importa√ß√£o ${id} exclu√≠da com sucesso`);
    } catch (error) {
      console.error(`‚ùå Erro ao excluir importa√ß√£o ${id}:`, error);
      throw new Error("Erro ao excluir importa√ß√£o");
    }
  }

  async createNfeProduct(nfeProduct: InsertNfeProduct): Promise<NfeProduct> {
    const id = randomUUID();
    const product: NfeProduct = { 
      ...nfeProduct, 
      id,
      unitPrice: nfeProduct.unitPrice?.toString() || '0',
      totalValue: nfeProduct.totalValue?.toString() || '0',
      code: nfeProduct.code || nfeProduct.nfeCode || 'N/A'
    };
    await db.insert(nfeProducts).values(product);
    return product;
  }

  async getNfeProductsByImport(importHistoryId: string): Promise<NfeProduct[]> {
    return await db.select().from(nfeProducts).where(eq(nfeProducts.importHistoryId, importHistoryId));
  }

  // üî• M√âTODO createNfeData CORRIGIDO - PROBLEMA DE DATA RESOLVIDO
  async createNfeData(insertNfeData: InsertNfeData): Promise<NfeData> {
    try {
      const id = randomUUID();
      console.log(`üíæ Criando dados NFe:`, {
        id,
        importHistoryId: insertNfeData.importHistoryId,
        accessKey: insertNfeData.accessKey,
        xmlContentLength: insertNfeData.xmlContent?.length || 0
      });

      // üî• CORRE√á√ÉO CR√çTICA: Validar e formatar a data corretamente
      let emissionDate: Date;
      try {
        emissionDate = new Date(insertNfeData.emissionDate);
        if (isNaN(emissionDate.getTime())) {
          console.warn('‚ö†Ô∏è Data de emiss√£o inv√°lida, usando data atual');
          emissionDate = new Date();
        }
      } catch {
        emissionDate = new Date();
      }

      console.log(`üìÖ Data de emiss√£o processada:`, emissionDate.toISOString());

      // üî• CORRE√á√ÉO: Garantir que todos os campos obrigat√≥rios estejam presentes
      const data: NfeData = { 
        ...insertNfeData, 
        id, 
        createdAt: new Date(),
        emissionDate: emissionDate, // üî• DATA CORRIGIDA
        totalValue: insertNfeData.totalValue?.toString() || '0',
        xmlContent: insertNfeData.xmlContent || '',
        rawData: insertNfeData.rawData || {}
      };

      console.log(`üìä Dados NFe preparados para inser√ß√£o:`, {
        id: data.id,
        importHistoryId: data.importHistoryId,
        accessKey: data.accessKey,
        emissionDate: data.emissionDate,
        xmlContentLength: data.xmlContent.length
      });

      // üî• CORRE√á√ÉO: Verificar se importHistoryId est√° presente
      if (!data.importHistoryId) {
        throw new Error("importHistoryId √© obrigat√≥rio para criar dados NFe");
      }

      await db.insert(nfeData).values(data);
      console.log(`‚úÖ Dados NFe inseridos no banco: ${id}`);
      
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao criar dados NFe:', error);
      console.error('üìã Dados que causaram o erro:', {
        importHistoryId: insertNfeData.importHistoryId,
        accessKey: insertNfeData.accessKey,
        emissionDate: insertNfeData.emissionDate,
        xmlContentLength: insertNfeData.xmlContent?.length
      });
      throw new Error(`Erro ao salvar dados NFe: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }

  async getNfeDataByImport(importHistoryId: string): Promise<NfeData | undefined> {
    try {
      console.log(`üîç Buscando dados NFe para importa√ß√£o: ${importHistoryId}`);
      const result = await db.select().from(nfeData).where(eq(nfeData.importHistoryId, importHistoryId));
      console.log(`üìä Dados NFe encontrados: ${result.length}`);
      if (result[0] && result[0].xmlContent) {
        console.log(`üìÑ XML content dispon√≠vel: ${result[0].xmlContent.length} bytes`);
      } else {
        console.log(`‚ö†Ô∏è XML content N√ÉO dispon√≠vel para importa√ß√£o: ${importHistoryId}`);
      }
      return result[0];
    } catch (error) {
      console.error('‚ùå Erro ao buscar dados NFe:', error);
      return undefined;
    }
  }

  async getNfeDataByAccessKey(accessKey: string): Promise<NfeData | undefined> {
    const result = await db.select().from(nfeData).where(eq(nfeData.accessKey, accessKey));
    return result[0];
  }

  // üî• M√âTODO processNfeImport CORRIGIDO - GARANTIR QUE XML SEJA SALVO
  async processNfeImport(fileData: any, userId?: string): Promise<ImportHistory> {
    try {
      console.log('üíæ Tentando salvar importa√ß√£o no banco...');
      
      let importRecord;
      
      try {
        // üî• CORRE√á√ÉO CR√çTICA: Garantir que o XML content seja salvo
        const xmlContent = fileData.xmlContent || '';
        
        console.log(`üìÑ XML content a ser salvo: ${xmlContent.length} bytes`);
        
        importRecord = await this.createImportHistory({
          fileName: fileData.fileName,
          status: 'processando',
          productsFound: fileData.products?.length || 0,
          productsCreated: 0,
          productsUpdated: 0,
          supplier: fileData.supplier?.name || 'Processando...',
          supplierCnpj: fileData.supplier?.cnpj || '',
          supplierAddress: fileData.supplier?.address?.street || '',
          nfeNumber: fileData.documentNumber || '...',
          nfeKey: fileData.accessKey || '',
          emissionDate: new Date(fileData.emissionDate || new Date()),
          totalValue: fileData.totalValue || 0,
          userId: userId,
          errorMessage: null
        });

        console.log('‚úÖ Hist√≥rico criado:', importRecord.id);

        // üî• CORRE√á√ÉO: Salvar dados NFe com XML content - CORRIGIDO
        if (fileData.accessKey) {
          try {
            console.log(`üíæ Salvando dados NFe para importa√ß√£o ${importRecord.id}`);
            
            const nfeDataRecord = await this.createNfeData({
              importHistoryId: importRecord.id, // üî• AGORA CORRETO - usando importRecord.id
              accessKey: fileData.accessKey,
              documentNumber: fileData.documentNumber,
              supplier: fileData.supplier,
              emissionDate: new Date(fileData.emissionDate || new Date()),
              totalValue: fileData.totalValue,
              xmlContent: xmlContent, // üî• AGORA SALVANDO O XML CORRETAMENTE
              rawData: fileData.rawData
            });
            console.log('‚úÖ Dados da NFe salvos:', nfeDataRecord.id);
            console.log(`üìÑ XML salvo no banco: ${xmlContent.length} bytes`);
          } catch (nfeError) {
            console.error('‚ùå Erro ao salvar dados NFe:', nfeError);
            // Continuar mesmo com erro nos dados NFe para n√£o quebrar a importa√ß√£o
          }
        }

        // Salvar produtos NFe
        if (fileData.products && fileData.products.length > 0) {
          let savedProducts = 0;
          for (const product of fileData.products) {
            try {
              await this.createNfeProduct({
                importHistoryId: importRecord.id,
                productId: null,
                nfeCode: product.code,
                code: product.code,
                name: product.name,
                quantity: product.quantity,
                unitPrice: product.unitPrice,
                unit: product.unit,
                totalValue: product.totalValue,
                nfeData: product
              });
              savedProducts++;
            } catch (productError) {
              console.error('‚ùå Erro ao salvar produto:', productError);
            }
          }
          console.log(`‚úÖ ${savedProducts} produtos salvos`);
        }

        // Atualizar hist√≥rico como processado
        const updatedRecord = await this.updateImportHistory(importRecord.id, {
          status: 'processado',
          productsFound: fileData.products?.length || 0,
          productsCreated: fileData.products?.length || 0,
          productsUpdated: 0,
          supplier: fileData.supplier?.name || 'Fornecedor',
          supplierCnpj: fileData.supplier?.cnpj || '',
          supplierAddress: fileData.supplier?.address?.street || '',
          nfeNumber: fileData.documentNumber || '000001',
          nfeKey: fileData.accessKey || '',
          totalValue: fileData.totalValue || 0,
          processedAt: new Date()
        });

        console.log('‚úÖ Importa√ß√£o finalizada com sucesso!');
        return updatedRecord;

      } catch (processError) {
        console.error('‚ùå Erro no processamento:', processError);
        
        if (importRecord) {
          try {
            await this.updateImportHistory(importRecord.id, {
              status: 'erro',
              errorMessage: processError instanceof Error ? processError.message : 'Erro desconhecido'
            });
          } catch (updateError) {
            console.error('‚ùå Erro ao atualizar status para erro:', updateError);
          }
        }
        
        throw processError;
      }

    } catch (error) {
      console.error('‚ùå Erro geral no processNfeImport:', error);
      throw new Error(`Erro na importa√ß√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }

  // üî• M√âTODOS PARA CADASTRO
  async createEmpresa(empresa: InsertEmpresa): Promise<Empresa> {
    const id = randomUUID();
    const empresaData: Empresa = {
      ...empresa,
      id,
      status: 'pendente',
      dataAprovacao: null,
      plano: 'starter',
      dataExpiracao: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dias
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    await db.insert(empresas).values(empresaData);
    return empresaData;
  }

  async getEmpresa(id: string): Promise<Empresa | undefined> {
    const result = await db.select().from(empresas).where(eq(empresas.id, id));
    return result[0];
  }

  async getEmpresaByCnpj(cnpj: string): Promise<Empresa | undefined> {
    const result = await db.select().from(empresas).where(eq(empresas.cnpj, cnpj));
    return result[0];
  }

  async getEmpresaByEmail(email: string): Promise<Empresa | undefined> {
    const result = await db.select().from(empresas).where(eq(empresas.email, email));
    return result[0];
  }

  async updateEmpresa(id: string, empresa: Partial<InsertEmpresa>): Promise<Empresa> {
    const updateData = {
      ...empresa,
      updatedAt: new Date()
    };
    
    await db.update(empresas).set(updateData).where(eq(empresas.id, id));
    const updated = await this.getEmpresa(id);
    if (!updated) throw new Error("Empresa n√£o encontrada");
    return updated;
  }

  async createEmailVerificacao(verificacao: InsertEmailVerificacao): Promise<EmailVerificacao> {
    const id = randomUUID();
    const verificacaoData: EmailVerificacao = {
      ...verificacao,
      id,
      expiraEm: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 horas
      utilizado: false,
      createdAt: new Date()
    };
    
    await db.insert(emailVerificacoes).values(verificacaoData);
    return verificacaoData;
  }

  async getEmailVerificacao(token: string): Promise<EmailVerificacao | undefined> {
    const result = await db.select().from(emailVerificacoes).where(eq(emailVerificacoes.token, token));
    return result[0];
  }

  async marcarEmailComoVerificado(userId: string): Promise<User> {
    await db.update(users).set({
      emailVerificado: true,
      dataVerificacao: new Date(),
      tokenVerificacao: null
    }).where(eq(users.id, userId));
    
    const updated = await this.getUser(userId);
    if (!updated) throw new Error("Usu√°rio n√£o encontrado");
    return updated;
  }

  async utilizarTokenVerificacao(token: string): Promise<EmailVerificacao> {
    await db.update(emailVerificacoes).set({
      utilizado: true
    }).where(eq(emailVerificacoes.token, token));
    
    const updated = await this.getEmailVerificacao(token);
    if (!updated) throw new Error("Token n√£o encontrado");
    return updated;
  }

  // M√âTODO cadastrarUsuarioIndividual CORRIGIDO
  async cadastrarUsuarioIndividual(dados: CadastroUsuario): Promise<{user: User, token: string}> {
    try {
      console.log('üìù Iniciando cadastro de usu√°rio individual...');
      
      // Verificar se √© o admin (email especial)
      const isAdmin = dados.email === 'admin@stockmaster.com';
      
      console.log(`üîç Verificando email: ${dados.email} (admin: ${isAdmin})`);
      
      // Verificar se email j√° existe (exceto para admin durante setup)
      if (!isAdmin) {
        const usuarioExistente = await this.getUserByEmail(dados.email);
        if (usuarioExistente) {
          console.log('‚ùå Email j√° existe:', dados.email);
          throw new Error("J√° existe um usu√°rio com este email");
        }
      } else {
        // Para admin, verificar se j√° existe
        const adminExistente = await this.getUserByEmail(dados.email);
        if (adminExistente) {
          console.log('‚ùå Admin j√° existe');
          throw new Error("Usu√°rio admin j√° existe");
        }
      }

      // Gerar username √∫nico
      const baseUsername = dados.nome.toLowerCase().replace(/\s+/g, '.');
      let username = baseUsername;
      let counter = 1;
      
      while (await this.getUserByUsername(username)) {
        username = `${baseUsername}${counter}`;
        counter++;
        if (counter > 10) break; // Prevenir loop infinito
      }

      console.log(`üë§ Criando usu√°rio com username: ${username}`);

      // Criar usu√°rio
      const user = await this.createUser({
        username,
        password: dados.senha,
        name: dados.nome,
        email: dados.email,
        tipo: 'individual',
        role: isAdmin ? 'super_admin' : 'user', // üî• DEFINE ROLE
        // üî• ADMIN: Marcar como verificado automaticamente
        emailVerificado: isAdmin
      });

      // Gerar token de verifica√ß√£o (apenas para n√£o-admins)
      const token = isAdmin ? 'admin-auto-verified' : randomUUID();
      
      if (!isAdmin) {
        console.log(`üîê Criando token de verifica√ß√£o para: ${user.email}`);
        await this.createEmailVerificacao({
          userId: user.id,
          email: user.email,
          token,
          tipo: 'cadastro'
        });
      } else {
        console.log('‚ö° Admin criado - sem verifica√ß√£o necess√°ria');
      }

      console.log('‚úÖ Cadastro de usu√°rio individual conclu√≠do com sucesso');
      return { user, token };

    } catch (error) {
      console.error('‚ùå Erro no cadastrarUsuarioIndividual:', error);
      throw error; // Re-lan√ßar o erro para ser tratado no route
    }
  }

  async cadastrarEmpresa(dados: CadastroEmpresa): Promise<{empresa: Empresa, admin: User, token: string}> {
    try {
      console.log('üè¢ Iniciando cadastro de empresa...');
      
      // Verificar se CNPJ j√° existe
      const empresaExistente = await this.getEmpresaByCnpj(dados.empresaCnpj);
      if (empresaExistente) {
        throw new Error("J√° existe uma empresa cadastrada com este CNPJ");
      }

      // Verificar se email da empresa j√° existe
      const emailEmpresaExistente = await this.getEmpresaByEmail(dados.empresaEmail);
      if (emailEmpresaExistente) {
        throw new Error("J√° existe uma empresa cadastrada com este email");
      }

      // Verificar se email do admin j√° existe
      const adminExistente = await this.getUserByEmail(dados.adminEmail);
      if (adminExistente) {
        throw new Error("J√° existe um usu√°rio com este email de administrador");
      }

      // Criar empresa
      const empresa = await this.createEmpresa({
        nome: dados.empresaNome,
        cnpj: dados.empresaCnpj,
        email: dados.empresaEmail,
        telefone: dados.empresaTelefone,
        website: dados.empresaWebsite,
        cep: dados.empresaCep,
        logradouro: dados.empresaLogradouro,
        numero: dados.empresaNumero,
        complemento: dados.empresaComplemento,
        cidade: dados.empresaCidade,
        estado: dados.empresaEstado
      });

      console.log(`üè¢ Empresa criada: ${empresa.nome}`);

      // Gerar username √∫nico para admin
      const baseUsername = dados.adminNome.toLowerCase().replace(/\s+/g, '.');
      let username = baseUsername;
      let counter = 1;
      
      while (await this.getUserByUsername(username)) {
        username = `${baseUsername}${counter}`;
        counter++;
        if (counter > 10) break;
      }

      console.log(`üë§ Criando admin com username: ${username}`);

      // Criar usu√°rio administrador
      const admin = await this.createUser({
        username,
        password: dados.adminSenha,
        name: dados.adminNome,
        email: dados.adminEmail,
        tipo: 'empresa',
        role: 'admin', // üî• ADMIN DA EMPRESA
        empresaId: empresa.id
      });

      // Gerar token de verifica√ß√£o
      const token = randomUUID();
      await this.createEmailVerificacao({
        userId: admin.id,
        email: admin.email,
        token,
        tipo: 'cadastro'
      });

      console.log('‚úÖ Cadastro de empresa conclu√≠do com sucesso');
      return { empresa, admin, token };

    } catch (error) {
      console.error('‚ùå Erro no cadastrarEmpresa:', error);
      throw error;
    }
  }

  // üî• NOVOS M√âTODOS DE PERMISS√ïES

  async getUsersByEmpresa(empresaId: string): Promise<User[]> {
    try {
      const result = await db.select().from(users).where(eq(users.empresaId, empresaId));
      return result;
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios da empresa:', error);
      return [];
    }
  }

  async getEmpresaUsers(empresaId: string): Promise<User[]> {
    return this.getUsersByEmpresa(empresaId);
  }

  async createUserForEmpresa(userData: any, empresaId: string, createdBy: string): Promise<User> {
    try {
      console.log('üë• Criando usu√°rio para empresa...', { userData, empresaId, createdBy });

      // Verificar se email j√° existe
      const existingUser = await this.getUserByEmail(userData.email);
      if (existingUser) {
        throw new Error("J√° existe um usu√°rio com este email");
      }

      // Gerar username √∫nico
      const baseUsername = userData.name.toLowerCase().replace(/\s+/g, '.');
      let username = baseUsername;
      let counter = 1;
      
      while (await this.getUserByUsername(username)) {
        username = `${baseUsername}${counter}`;
        counter++;
        if (counter > 10) break;
      }

      // Criar usu√°rio
      const user = await this.createUser({
        username,
        password: userData.password || '123456', // Senha padr√£o
        name: userData.name,
        email: userData.email,
        tipo: 'empresa',
        role: userData.role || 'user',
        empresaId: empresaId,
        emailVerificado: false
      });

      // Gerar token de verifica√ß√£o
      const token = randomUUID();
      await this.createEmailVerificacao({
        userId: user.id,
        email: user.email,
        token,
        tipo: 'cadastro'
      });

      console.log('‚úÖ Usu√°rio criado para empresa com sucesso');
      return user;

    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio para empresa:', error);
      throw error;
    }
  }

  async updateUserRole(userId: string, role: 'super_admin' | 'admin' | 'user'): Promise<User> {
    try {
      await db.update(users).set({ role }).where(eq(users.id, userId));
      const updated = await this.getUser(userId);
      if (!updated) throw new Error("Usu√°rio n√£o encontrado");
      
      console.log(`‚úÖ Role do usu√°rio ${userId} atualizado para: ${role}`);
      return updated;
    } catch (error) {
      console.error('‚ùå Erro ao atualizar role do usu√°rio:', error);
      throw error;
    }
  }

  // üî• M√âTODO deleteUser CORRIGIDO
  async deleteUser(userId: string): Promise<void> {
    try {
      // N√£o permitir deletar o pr√≥prio usu√°rio
      const currentUser = await this.getUser(userId);
      if (!currentUser) {
        throw new Error("Usu√°rio n√£o encontrado");
      }

      // N√£o permitir deletar super_admin
      if (currentUser.role === 'super_admin') {
        throw new Error("N√£o √© poss√≠vel deletar um Super Admin");
      }

      // üî• CORRE√á√ÉO: Primeiro deletar registros relacionados
      console.log(`üóëÔ∏è Deletando registros relacionados do usu√°rio: ${userId}`);
      
      // Deletar tokens de verifica√ß√£o de email
      try {
        await db.delete(emailVerificacoes).where(eq(emailVerificacoes.userId, userId));
        console.log(`‚úÖ Tokens de verifica√ß√£o deletados para usu√°rio: ${userId}`);
      } catch (emailError) {
        console.error(`‚ö†Ô∏è Erro ao deletar tokens de verifica√ß√£o:`, emailError);
      }

      // üî• ADICIONAR AQUI OUTRAS EXCLUS√ïES SE NECESS√ÅRIO:
      // - Movimenta√ß√µes relacionadas ao usu√°rio
      // - Invent√°rios criados pelo usu√°rio
      // - Relat√≥rios gerados pelo usu√°rio
      // - Importa√ß√µes feitas pelo usu√°rio

      // Agora deletar o usu√°rio
      await db.delete(users).where(eq(users.id, userId));
      console.log(`‚úÖ Usu√°rio ${userId} deletado com sucesso`);

    } catch (error) {
      console.error('‚ùå Erro ao deletar usu√°rio:', error);
      throw error;
    }
  }

  async canUserAccessModule(userId: string, module: string): Promise<boolean> {
    try {
      const user = await this.getUser(userId);
      if (!user) return false;

      // üî• DEFINI√á√ÉO DE PERMISS√ïES POR ROLE
      const permissions = {
        'super_admin': {
          produtos: ['view', 'create', 'edit', 'delete'],
          usuarios: ['view', 'create', 'edit', 'delete'],
          relatorios: ['view', 'create', 'export'],
          configuracoes: ['view', 'edit'],
          importacao: ['view', 'create', 'delete'],
          movimentacoes: ['view', 'create', 'edit', 'delete'],
          inventarios: ['view', 'create', 'edit', 'delete']
        },
        'admin': {
          produtos: ['view', 'create', 'edit', 'delete'],
          usuarios: ['view', 'create', 'edit'], // N√£o pode deletar super_admin
          relatorios: ['view', 'create', 'export'],
          configuracoes: ['view'],
          importacao: ['view', 'create', 'delete'],
          movimentacoes: ['view', 'create', 'edit', 'delete'],
          inventarios: ['view', 'create', 'edit', 'delete']
        },
        'user': {
          produtos: ['view'],
          usuarios: [], // Sem acesso
          relatorios: ['view'],
          configuracoes: [], // Sem acesso
          importacao: ['view'],
          movimentacoes: ['view', 'create'],
          inventarios: ['view']
        }
      };

      const userPermissions = permissions[user.role as keyof typeof permissions];
      return userPermissions && module in userPermissions && userPermissions[module as keyof typeof userPermissions].length > 0;
    } catch (error) {
      console.error('‚ùå Erro ao verificar permiss√µes:', error);
      return false;
    }
  }

  async getUserPermissions(userId: string): Promise<any> {
    try {
      const user = await this.getUser(userId);
      if (!user) return {};

      // üî• PERMISS√ïES DETALHADAS
      const permissions = {
        'super_admin': {
          dashboard: { view: true, edit: true },
          produtos: { view: true, create: true, edit: true, delete: true },
          categorias: { view: true, create: true, edit: true, delete: true },
          locais: { view: true, create: true, edit: true, delete: true },
          movimentacoes: { view: true, create: true, edit: true, delete: true },
          inventarios: { view: true, create: true, edit: true, delete: true },
          relatorios: { view: true, create: true, export: true },
          importacao: { view: true, create: true, delete: true },
          usuarios: { view: true, create: true, edit: true, delete: true },
          configuracoes: { view: true, edit: true },
          empresas: { view: true, create: true, edit: true, delete: true }
        },
        'admin': {
          dashboard: { view: true, edit: true },
          produtos: { view: true, create: true, edit: true, delete: true },
          categorias: { view: true, create: true, edit: true, delete: true },
          locais: { view: true, create: true, edit: true, delete: true },
          movimentacoes: { view: true, create: true, edit: true, delete: true },
          inventarios: { view: true, create: true, edit: true, delete: true },
          relatorios: { view: true, create: true, export: true },
          importacao: { view: true, create: true, delete: true },
          usuarios: { view: true, create: true, edit: true }, // N√£o pode deletar
          configuracoes: { view: true, edit: false },
          empresas: { view: false, create: false, edit: false, delete: false }
        },
        'user': {
          dashboard: { view: true, edit: false },
          produtos: { view: true, create: false, edit: false, delete: false },
          categorias: { view: true, create: false, edit: false, delete: false },
          locais: { view: true, create: false, edit: false, delete: false },
          movimentacoes: { view: true, create: true, edit: false, delete: false },
          inventarios: { view: true, create: false, edit: false, delete: false },
          relatorios: { view: true, create: false, export: false },
          importacao: { view: true, create: false, delete: false },
          usuarios: { view: false, create: false, edit: false, delete: false },
          configuracoes: { view: false, edit: false },
          empresas: { view: false, create: false, edit: false, delete: false }
        }
      };

      return permissions[user.role as keyof typeof permissions] || {};
    } catch (error) {
      console.error('‚ùå Erro ao buscar permiss√µes do usu√°rio:', error);
      return {};
    }
  }
}

export const storage = new DatabaseStorage();